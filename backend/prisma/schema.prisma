// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Directeur {
  id          Int         @id @default(autoincrement())
  nom         String
  prenom      String
  adresse     String?
  email       String?     @unique
  numTelephone String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  managers    Manager[]
  commercials Commercial[]
  zones       Zone[]
}

model Manager {
  id          Int         @id @default(autoincrement())
  nom         String
  prenom      String
  email       String?     @unique
  numTelephone String?
  directeurId Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  directeur   Directeur?  @relation(fields: [directeurId], references: [id])
  commercials Commercial[]
  zones       Zone[]
}

model Commercial {
  id          Int      @id @default(autoincrement())
  nom         String
  prenom      String
  email       String?  @unique
  numTel      String?
  age         Int?
  managerId   Int?
  directeurId Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  manager     Manager?     @relation(fields: [managerId], references: [id])
  directeur   Directeur?   @relation(fields: [directeurId], references: [id])
  immeubles   Immeuble[]
  zones       CommercialZone[]
  statistics  Statistic[]
}

model Zone {
  id          Int      @id @default(autoincrement())
  nom         String
  xOrigin     Float
  yOrigin     Float
  rayon       Float
  directeurId Int?
  managerId   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  directeur   Directeur? @relation(fields: [directeurId], references: [id])
  manager     Manager?   @relation(fields: [managerId], references: [id])
  commercials CommercialZone[]
  statistics  Statistic[]
}

model Immeuble {
  id                Int      @id @default(autoincrement())
  adresse           String
  nbEtages          Int
  nbPortesParEtage  Int
  commercialId      Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  commercial        Commercial? @relation(fields: [commercialId], references: [id])
  statistics        Statistic[]
}

model Statistic {
  id                    Int      @id @default(autoincrement())
  commercialId          Int?
  immeubleId            Int?
  zoneId                Int?
  contratsSignes        Int      // Nombre de contrats signés
  immeublesVisites      Int      // Nombre d'immeubles visités
  rendezVousPris        Int      // Nombre de rendez-vous pris
  refus                 Int      // Nombre de refus
  nbImmeublesProspectes Int      // Nombre d'immeubles prospectés
  nbPortesProspectes    Int      // Nombre de portes prospectées
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  commercial            Commercial? @relation(fields: [commercialId], references: [id])
  immeuble              Immeuble?   @relation(fields: [immeubleId], references: [id])
  zone                  Zone?       @relation(fields: [zoneId], references: [id])
}

model CommercialZone {
  id           Int        @id @default(autoincrement())
  commercialId Int
  zoneId       Int
  createdAt    DateTime   @default(now())

  commercial   Commercial @relation(fields: [commercialId], references: [id])
  zone         Zone       @relation(fields: [zoneId], references: [id])

  @@unique([commercialId, zoneId])
}
